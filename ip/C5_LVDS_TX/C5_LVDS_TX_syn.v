// megafunction wizard: %ALTLVDS_TX%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: ALTLVDS_TX 

// ============================================================
// File Name: C5_LVDS_TX.v
// Megafunction Name(s):
// 			ALTLVDS_TX
//
// Simulation Library Files(s):
// 			altera_mf
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 16.1.2 Build 203 01/18/2017 SJ Standard Edition
// ************************************************************


//Copyright (C) 2017  Intel Corporation. All rights reserved.
//Your use of Intel Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Intel Program License 
//Subscription Agreement, the Intel Quartus Prime License Agreement,
//the Intel MegaCore Function License Agreement, or other 
//applicable license agreement, including, without limitation, 
//that your use is for the sole purpose of programming logic 
//devices manufactured by Intel and sold by Intel or its 
//authorized distributors.  Please refer to the applicable 
//agreement for further details.


//altlvds_tx COMMON_RX_TX_PLL="OFF" CORECLOCK_DIVIDE_BY=1 DATA_RATE="800.0 Mbps" DESERIALIZATION_FACTOR=8 DEVICE_FAMILY="Cyclone V" DIFFERENTIAL_DRIVE=0 IMPLEMENT_IN_LES="OFF" INCLOCK_BOOST=0 INCLOCK_DATA_ALIGNMENT="EDGE_ALIGNED" INCLOCK_PERIOD=40000 INCLOCK_PHASE_SHIFT=0 MULTI_CLOCK="OFF" NUMBER_OF_CHANNELS=4 OUTCLOCK_ALIGNMENT="EDGE_ALIGNED" OUTCLOCK_DIVIDE_BY=4 OUTCLOCK_DUTY_CYCLE=50 OUTCLOCK_MULTIPLY_BY=1 OUTCLOCK_PHASE_SHIFT=0 OUTCLOCK_RESOURCE="Dual-Regional Clock" OUTPUT_DATA_RATE=800 PLL_COMPENSATION_MODE="AUTO" PLL_SELF_RESET_ON_LOSS_LOCK="OFF" PREEMPHASIS_SETTING=0 REFCLK_FREQUENCY="25.000000 MHz" REGISTERED_INPUT="TX_CORECLK" USE_EXTERNAL_PLL="OFF" USE_NO_PHASE_SHIFT="ON" VOD_SETTING=0 pll_areset tx_in tx_inclock tx_locked tx_out tx_outclock
//VERSION_BEGIN 16.1 cbx_altaccumulate 2017:01:11:18:30:33:SJ cbx_altclkbuf 2017:01:11:18:30:33:SJ cbx_altddio_in 2017:01:11:18:30:33:SJ cbx_altddio_out 2017:01:11:18:30:33:SJ cbx_altera_syncram_nd_impl 2017:01:11:18:30:33:SJ cbx_altiobuf_bidir 2017:01:11:18:30:33:SJ cbx_altiobuf_in 2017:01:11:18:30:33:SJ cbx_altiobuf_out 2017:01:11:18:30:33:SJ cbx_altlvds_tx 2017:01:11:18:30:33:SJ cbx_altpll 2017:01:11:18:30:33:SJ cbx_altsyncram 2017:01:11:18:30:33:SJ cbx_arriav 2017:01:11:18:30:33:SJ cbx_cyclone 2017:01:11:18:30:33:SJ cbx_cycloneii 2017:01:11:18:30:33:SJ cbx_lpm_add_sub 2017:01:11:18:30:33:SJ cbx_lpm_compare 2017:01:11:18:30:33:SJ cbx_lpm_counter 2017:01:11:18:30:33:SJ cbx_lpm_decode 2017:01:11:18:30:33:SJ cbx_lpm_mux 2017:01:11:18:30:33:SJ cbx_lpm_shiftreg 2017:01:11:18:30:33:SJ cbx_maxii 2017:01:11:18:30:33:SJ cbx_mgl 2017:01:11:19:37:47:SJ cbx_nadder 2017:01:11:18:30:33:SJ cbx_stratix 2017:01:11:18:30:33:SJ cbx_stratixii 2017:01:11:18:30:33:SJ cbx_stratixiii 2017:01:11:18:30:33:SJ cbx_stratixv 2017:01:11:18:30:33:SJ cbx_util_mgl 2017:01:11:18:30:33:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//altclkctrl CLOCK_TYPE="Dual-Regional Clock" DEVICE_FAMILY="Cyclone V" inclk outclk
//VERSION_BEGIN 16.1 cbx_altclkbuf 2017:01:11:18:30:33:SJ cbx_cycloneii 2017:01:11:18:30:33:SJ cbx_lpm_add_sub 2017:01:11:18:30:33:SJ cbx_lpm_compare 2017:01:11:18:30:33:SJ cbx_lpm_decode 2017:01:11:18:30:33:SJ cbx_lpm_mux 2017:01:11:18:30:33:SJ cbx_mgl 2017:01:11:19:37:47:SJ cbx_nadder 2017:01:11:18:30:33:SJ cbx_stratix 2017:01:11:18:30:33:SJ cbx_stratixii 2017:01:11:18:30:33:SJ cbx_stratixiii 2017:01:11:18:30:33:SJ cbx_stratixv 2017:01:11:18:30:33:SJ  VERSION_END

//synthesis_resources = cyclonev_clkena 1 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  C5_LVDS_TX_altclkctrl
	( 
	inclk,
	outclk) /* synthesis synthesis_clearbox=1 */;
	input   [3:0]  inclk;
	output   outclk;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [3:0]  inclk;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  wire_sd7_outclk;
	wire [1:0]  clkselect;
	wire ena;

	cyclonev_clkena   sd7
	( 
	.ena(ena),
	.enaout(),
	.inclk(inclk[0]),
	.outclk(wire_sd7_outclk));
	defparam
		sd7.clock_type = "Dual-Regional Clock",
		sd7.ena_register_mode = "always enabled",
		sd7.lpm_type = "cyclonev_clkena";
	assign
		clkselect = {2{1'b0}},
		ena = 1'b1,
		outclk = wire_sd7_outclk;
endmodule //C5_LVDS_TX_altclkctrl

//synthesis_resources = cyclonev_clkena 1 cyclonev_ir_fifo_userdes 5 generic_pll 3 reg 32 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"{-to pll_fclk} PLL_COMPENSATION_MODE=LVDS;-name MULTICYCLE 7 -from txreg* -to lvds_tx_fifo*;-name MULTICYCLE_HOLD 8 -from txreg* -to lvds_tx_fifo*"} *)
module  C5_LVDS_TX_lvds_tx
	( 
	pll_areset,
	tx_in,
	tx_inclock,
	tx_locked,
	tx_out,
	tx_outclock) /* synthesis synthesis_clearbox=1 */;
	input   pll_areset;
	input   [31:0]  tx_in;
	input   tx_inclock;
	output   tx_locked;
	output   [3:0]  tx_out;
	output   tx_outclock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   pll_areset;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  wire_coreclk_buf_outclk;
	wire  wire_lvds_outclk_tx_serialiser_txout;
	wire  wire_sd1_txout;
	wire  wire_sd2_txout;
	wire  wire_sd3_txout;
	wire  wire_sd4_txout;
	(* ALTERA_ATTRIBUTE = {"PRESERVE_REGISTER=ON"} *)
	reg	[31:0]	txreg;
	wire  wire_pll_ena_outclk;
	wire  wire_pll_fclk_fboutclk;
	wire  wire_pll_fclk_locked;
	wire  wire_pll_fclk_outclk;
	wire  wire_pll_sclk_outclk;

	C5_LVDS_TX_altclkctrl   coreclk_buf
	( 
	.inclk({{3{1'b0}}, wire_pll_sclk_outclk}),
	.outclk(wire_coreclk_buf_outclk));
	cyclonev_ir_fifo_userdes   lvds_outclk_tx_serialiser
	( 
	.bslipmax(),
	.bslipout(),
	.dout(),
	.loaden(wire_pll_ena_outclk),
	.lvdsmodeen(),
	.lvdstxsel(),
	.rstn(pll_areset),
	.rxout(),
	.scanout(),
	.txin(10'b0011001100),
	.txout(wire_lvds_outclk_tx_serialiser_txout),
	.writeclk(wire_pll_fclk_outclk)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.bslipctl(1'b0),
	.bslipin(1'b0),
	.dinfiforx({2{1'b0}}),
	.dynfifomode({3{1'b0}}),
	.readclk(1'b0),
	.readenable(1'b0),
	.regscan(1'b0),
	.regscanovrd(1'b0),
	.scanin(1'b0),
	.tstclk(1'b0),
	.writeenable(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.observablefout1(),
	.observablefout2(),
	.observablefout3(),
	.observablefout4(),
	.observableout(),
	.observablewaddrcnt()
	// synopsys translate_on
	);
	defparam
		lvds_outclk_tx_serialiser.a_rb_bypass_serializer = "false",
		lvds_outclk_tx_serialiser.a_rb_data_width = 8,
		lvds_outclk_tx_serialiser.a_rb_fifo_mode = "serializer_mode",
		lvds_outclk_tx_serialiser.a_rb_tx_outclk = "true",
		lvds_outclk_tx_serialiser.lpm_type = "cyclonev_ir_fifo_userdes";
	cyclonev_ir_fifo_userdes   sd1
	( 
	.bslipmax(),
	.bslipout(),
	.dout(),
	.loaden(wire_pll_ena_outclk),
	.lvdsmodeen(),
	.lvdstxsel(),
	.rstn(pll_areset),
	.rxout(),
	.scanout(),
	.txin({{2{1'b0}}, txreg[7:0]}),
	.txout(wire_sd1_txout),
	.writeclk(wire_pll_fclk_outclk)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.bslipctl(1'b0),
	.bslipin(1'b0),
	.dinfiforx({2{1'b0}}),
	.dynfifomode({3{1'b0}}),
	.readclk(1'b0),
	.readenable(1'b0),
	.regscan(1'b0),
	.regscanovrd(1'b0),
	.scanin(1'b0),
	.tstclk(1'b0),
	.writeenable(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.observablefout1(),
	.observablefout2(),
	.observablefout3(),
	.observablefout4(),
	.observableout(),
	.observablewaddrcnt()
	// synopsys translate_on
	);
	defparam
		sd1.a_rb_data_width = 8,
		sd1.a_rb_fifo_mode = "serializer_mode",
		sd1.lpm_type = "cyclonev_ir_fifo_userdes";
	cyclonev_ir_fifo_userdes   sd2
	( 
	.bslipmax(),
	.bslipout(),
	.dout(),
	.loaden(wire_pll_ena_outclk),
	.lvdsmodeen(),
	.lvdstxsel(),
	.rstn(pll_areset),
	.rxout(),
	.scanout(),
	.txin({{2{1'b0}}, txreg[15:8]}),
	.txout(wire_sd2_txout),
	.writeclk(wire_pll_fclk_outclk)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.bslipctl(1'b0),
	.bslipin(1'b0),
	.dinfiforx({2{1'b0}}),
	.dynfifomode({3{1'b0}}),
	.readclk(1'b0),
	.readenable(1'b0),
	.regscan(1'b0),
	.regscanovrd(1'b0),
	.scanin(1'b0),
	.tstclk(1'b0),
	.writeenable(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.observablefout1(),
	.observablefout2(),
	.observablefout3(),
	.observablefout4(),
	.observableout(),
	.observablewaddrcnt()
	// synopsys translate_on
	);
	defparam
		sd2.a_rb_data_width = 8,
		sd2.a_rb_fifo_mode = "serializer_mode",
		sd2.lpm_type = "cyclonev_ir_fifo_userdes";
	cyclonev_ir_fifo_userdes   sd3
	( 
	.bslipmax(),
	.bslipout(),
	.dout(),
	.loaden(wire_pll_ena_outclk),
	.lvdsmodeen(),
	.lvdstxsel(),
	.rstn(pll_areset),
	.rxout(),
	.scanout(),
	.txin({{2{1'b0}}, txreg[23:16]}),
	.txout(wire_sd3_txout),
	.writeclk(wire_pll_fclk_outclk)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.bslipctl(1'b0),
	.bslipin(1'b0),
	.dinfiforx({2{1'b0}}),
	.dynfifomode({3{1'b0}}),
	.readclk(1'b0),
	.readenable(1'b0),
	.regscan(1'b0),
	.regscanovrd(1'b0),
	.scanin(1'b0),
	.tstclk(1'b0),
	.writeenable(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.observablefout1(),
	.observablefout2(),
	.observablefout3(),
	.observablefout4(),
	.observableout(),
	.observablewaddrcnt()
	// synopsys translate_on
	);
	defparam
		sd3.a_rb_data_width = 8,
		sd3.a_rb_fifo_mode = "serializer_mode",
		sd3.lpm_type = "cyclonev_ir_fifo_userdes";
	cyclonev_ir_fifo_userdes   sd4
	( 
	.bslipmax(),
	.bslipout(),
	.dout(),
	.loaden(wire_pll_ena_outclk),
	.lvdsmodeen(),
	.lvdstxsel(),
	.rstn(pll_areset),
	.rxout(),
	.scanout(),
	.txin({{2{1'b0}}, txreg[31:24]}),
	.txout(wire_sd4_txout),
	.writeclk(wire_pll_fclk_outclk)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.bslipctl(1'b0),
	.bslipin(1'b0),
	.dinfiforx({2{1'b0}}),
	.dynfifomode({3{1'b0}}),
	.readclk(1'b0),
	.readenable(1'b0),
	.regscan(1'b0),
	.regscanovrd(1'b0),
	.scanin(1'b0),
	.tstclk(1'b0),
	.writeenable(1'b0)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.observablefout1(),
	.observablefout2(),
	.observablefout3(),
	.observablefout4(),
	.observableout(),
	.observablewaddrcnt()
	// synopsys translate_on
	);
	defparam
		sd4.a_rb_data_width = 8,
		sd4.a_rb_fifo_mode = "serializer_mode",
		sd4.lpm_type = "cyclonev_ir_fifo_userdes";
	// synopsys translate_off
	initial
		txreg = 0;
	// synopsys translate_on
	always @ ( posedge wire_coreclk_buf_outclk)
		  txreg <= tx_in;
	generic_pll   pll_ena
	( 
	.fbclk(wire_pll_fclk_fboutclk),
	.fboutclk(),
	.locked(),
	.outclk(wire_pll_ena_outclk),
	.refclk(tx_inclock),
	.rst(pll_areset));
	defparam
		pll_ena.duty_cycle = 13,
		pll_ena.output_clock_frequency = "100.000000 MHz",
		pll_ena.phase_shift = "7500 ps",
		pll_ena.reference_clock_frequency = "25.000000 MHz",
		pll_ena.lpm_type = "generic_pll";
	generic_pll   pll_fclk
	( 
	.fbclk(wire_pll_fclk_fboutclk),
	.fboutclk(wire_pll_fclk_fboutclk),
	.locked(wire_pll_fclk_locked),
	.outclk(wire_pll_fclk_outclk),
	.refclk(tx_inclock),
	.rst(pll_areset));
	defparam
		pll_fclk.output_clock_frequency = "800.000000 MHz",
		pll_fclk.phase_shift = "625 ps",
		pll_fclk.reference_clock_frequency = "25.000000 MHz",
		pll_fclk.lpm_type = "generic_pll";
	generic_pll   pll_sclk
	( 
	.fbclk(wire_pll_fclk_fboutclk),
	.fboutclk(),
	.locked(),
	.outclk(wire_pll_sclk_outclk),
	.refclk(tx_inclock),
	.rst(pll_areset));
	defparam
		pll_sclk.output_clock_frequency = "100.000000 MHz",
		pll_sclk.phase_shift = "9375 ps",
		pll_sclk.reference_clock_frequency = "25.000000 MHz",
		pll_sclk.lpm_type = "generic_pll";
	assign
		tx_locked = wire_pll_fclk_locked,
		tx_out = {wire_sd4_txout, wire_sd3_txout, wire_sd2_txout, wire_sd1_txout},
		tx_outclock = wire_lvds_outclk_tx_serialiser_txout;
endmodule //C5_LVDS_TX_lvds_tx
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module C5_LVDS_TX (
	pll_areset,
	tx_in,
	tx_inclock,
	tx_locked,
	tx_out,
	tx_outclock)/* synthesis synthesis_clearbox = 1 */;

	input	  pll_areset;
	input	[31:0]  tx_in;
	input	  tx_inclock;
	output	  tx_locked;
	output	[3:0]  tx_out;
	output	  tx_outclock;

	wire  sub_wire0;
	wire [3:0] sub_wire1;
	wire  sub_wire2;
	wire  tx_locked = sub_wire0;
	wire [3:0] tx_out = sub_wire1[3:0];
	wire  tx_outclock = sub_wire2;

	C5_LVDS_TX_lvds_tx	C5_LVDS_TX_lvds_tx_component (
				.pll_areset (pll_areset),
				.tx_in (tx_in),
				.tx_inclock (tx_inclock),
				.tx_locked (sub_wire0),
				.tx_out (sub_wire1),
				.tx_outclock (sub_wire2));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: LIBRARY: altera_mf altera_mf.altera_mf_components.all
// Retrieval info: PRIVATE: CNX_CLOCK_CHOICES STRING "tx_coreclock"
// Retrieval info: PRIVATE: CNX_CLOCK_MODE NUMERIC "0"
// Retrieval info: PRIVATE: CNX_COMMON_PLL NUMERIC "0"
// Retrieval info: PRIVATE: CNX_DATA_RATE STRING "800.0"
// Retrieval info: PRIVATE: CNX_DESER_FACTOR NUMERIC "8"
// Retrieval info: PRIVATE: CNX_EXT_PLL STRING "OFF"
// Retrieval info: PRIVATE: CNX_LE_SERDES STRING "OFF"
// Retrieval info: PRIVATE: CNX_NUM_CHANNEL NUMERIC "4"
// Retrieval info: PRIVATE: CNX_OUTCLOCK_DIVIDE_BY NUMERIC "4"
// Retrieval info: PRIVATE: CNX_PLL_ARESET NUMERIC "1"
// Retrieval info: PRIVATE: CNX_PLL_FREQ STRING "25.000000"
// Retrieval info: PRIVATE: CNX_PLL_PERIOD STRING "40.000"
// Retrieval info: PRIVATE: CNX_REG_INOUT NUMERIC "1"
// Retrieval info: PRIVATE: CNX_TX_CORECLOCK STRING "OFF"
// Retrieval info: PRIVATE: CNX_TX_LOCKED STRING "ON"
// Retrieval info: PRIVATE: CNX_TX_OUTCLOCK STRING "ON"
// Retrieval info: PRIVATE: CNX_USE_CLOCK_RESC STRING "Dual-Regional clock"
// Retrieval info: PRIVATE: CNX_USE_PLL_ENABLE NUMERIC "0"
// Retrieval info: PRIVATE: CNX_USE_TX_OUT_PHASE NUMERIC "1"
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone V"
// Retrieval info: PRIVATE: pCNX_OUTCLK_ALIGN STRING "UNUSED"
// Retrieval info: PRIVATE: pINCLOCK_PHASE_SHIFT STRING "0.00"
// Retrieval info: PRIVATE: pOUTCLOCK_PHASE_SHIFT STRING "0.00"
// Retrieval info: CONSTANT: CENTER_ALIGN_MSB STRING "UNUSED"
// Retrieval info: CONSTANT: COMMON_RX_TX_PLL STRING "OFF"
// Retrieval info: CONSTANT: CORECLOCK_DIVIDE_BY NUMERIC "1"
// Retrieval info: CONSTANT: clk_src_is_pll STRING "off"
// Retrieval info: CONSTANT: DATA_RATE STRING "800.0 Mbps"
// Retrieval info: CONSTANT: DESERIALIZATION_FACTOR NUMERIC "8"
// Retrieval info: CONSTANT: DIFFERENTIAL_DRIVE NUMERIC "0"
// Retrieval info: CONSTANT: ENABLE_CLOCK_PIN_MODE STRING "UNUSED"
// Retrieval info: CONSTANT: IMPLEMENT_IN_LES STRING "OFF"
// Retrieval info: CONSTANT: INCLOCK_BOOST NUMERIC "0"
// Retrieval info: CONSTANT: INCLOCK_DATA_ALIGNMENT STRING "EDGE_ALIGNED"
// Retrieval info: CONSTANT: INCLOCK_PERIOD NUMERIC "40000"
// Retrieval info: CONSTANT: INCLOCK_PHASE_SHIFT NUMERIC "0"
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "Cyclone V"
// Retrieval info: CONSTANT: LPM_HINT STRING "UNUSED"
// Retrieval info: CONSTANT: LPM_TYPE STRING "altlvds_tx"
// Retrieval info: CONSTANT: MULTI_CLOCK STRING "OFF"
// Retrieval info: CONSTANT: NUMBER_OF_CHANNELS NUMERIC "4"
// Retrieval info: CONSTANT: OUTCLOCK_ALIGNMENT STRING "EDGE_ALIGNED"
// Retrieval info: CONSTANT: OUTCLOCK_DIVIDE_BY NUMERIC "4"
// Retrieval info: CONSTANT: OUTCLOCK_DUTY_CYCLE NUMERIC "50"
// Retrieval info: CONSTANT: OUTCLOCK_MULTIPLY_BY NUMERIC "1"
// Retrieval info: CONSTANT: OUTCLOCK_PHASE_SHIFT NUMERIC "0"
// Retrieval info: CONSTANT: OUTCLOCK_RESOURCE STRING "Dual-Regional clock"
// Retrieval info: CONSTANT: OUTPUT_DATA_RATE NUMERIC "800"
// Retrieval info: CONSTANT: PLL_COMPENSATION_MODE STRING "AUTO"
// Retrieval info: CONSTANT: PLL_SELF_RESET_ON_LOSS_LOCK STRING "OFF"
// Retrieval info: CONSTANT: PREEMPHASIS_SETTING NUMERIC "0"
// Retrieval info: CONSTANT: REFCLK_FREQUENCY STRING "25.000000 MHz"
// Retrieval info: CONSTANT: REGISTERED_INPUT STRING "TX_CORECLK"
// Retrieval info: CONSTANT: USE_EXTERNAL_PLL STRING "OFF"
// Retrieval info: CONSTANT: USE_NO_PHASE_SHIFT STRING "ON"
// Retrieval info: CONSTANT: VOD_SETTING NUMERIC "0"
// Retrieval info: USED_PORT: pll_areset 0 0 0 0 INPUT NODEFVAL "pll_areset"
// Retrieval info: CONNECT: @pll_areset 0 0 0 0 pll_areset 0 0 0 0
// Retrieval info: USED_PORT: tx_in 0 0 32 0 INPUT NODEFVAL "tx_in[31..0]"
// Retrieval info: CONNECT: @tx_in 0 0 32 0 tx_in 0 0 32 0
// Retrieval info: USED_PORT: tx_inclock 0 0 0 0 INPUT NODEFVAL "tx_inclock"
// Retrieval info: CONNECT: @tx_inclock 0 0 0 0 tx_inclock 0 0 0 0
// Retrieval info: USED_PORT: tx_locked 0 0 0 0 OUTPUT NODEFVAL "tx_locked"
// Retrieval info: CONNECT: tx_locked 0 0 0 0 @tx_locked 0 0 0 0
// Retrieval info: USED_PORT: tx_out 0 0 4 0 OUTPUT NODEFVAL "tx_out[3..0]"
// Retrieval info: CONNECT: tx_out 0 0 4 0 @tx_out 0 0 4 0
// Retrieval info: USED_PORT: tx_outclock 0 0 0 0 OUTPUT NODEFVAL "tx_outclock"
// Retrieval info: CONNECT: tx_outclock 0 0 0 0 @tx_outclock 0 0 0 0
// Retrieval info: GEN_FILE: TYPE_NORMAL C5_LVDS_TX.v TRUE FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL C5_LVDS_TX.qip TRUE FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL C5_LVDS_TX.bsf TRUE TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL C5_LVDS_TX_inst.v TRUE TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL C5_LVDS_TX_bb.v TRUE TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL C5_LVDS_TX.inc FALSE TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL C5_LVDS_TX.cmp FALSE TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL C5_LVDS_TX.ppf TRUE FALSE
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX NUMERIC "1"
// Retrieval info: LIB_FILE: altera_mf
// Retrieval info: CBX_MODULE_PREFIX: ON
